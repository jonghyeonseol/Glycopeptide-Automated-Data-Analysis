[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "Ellipse",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "GridSpec",
        "importPath": "matplotlib.gridspec",
        "description": "matplotlib.gridspec",
        "isExtraImport": true,
        "detail": "matplotlib.gridspec",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "RobustScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PLSRegression",
        "importPath": "sklearn.cross_decomposition",
        "description": "sklearn.cross_decomposition",
        "isExtraImport": true,
        "detail": "sklearn.cross_decomposition",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PCAPlotMixin",
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "isExtraImport": true,
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "BoxplotMixin",
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "isExtraImport": true,
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "HeatmapMixin",
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "isExtraImport": true,
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "HistogramMixin",
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "isExtraImport": true,
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotMixin",
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "isExtraImport": true,
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "DistributionPlotMixin",
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "isExtraImport": true,
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "data_loader",
        "description": "data_loader",
        "isExtraImport": true,
        "detail": "data_loader",
        "documentation": {}
    },
    {
        "label": "GlycanAnnotator",
        "importPath": "annotator",
        "description": "annotator",
        "isExtraImport": true,
        "detail": "annotator",
        "documentation": {}
    },
    {
        "label": "GlycanAnalyzer",
        "importPath": "analyzer",
        "description": "analyzer",
        "isExtraImport": true,
        "detail": "analyzer",
        "documentation": {}
    },
    {
        "label": "GlycanVisualizer",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "BoxplotMixin",
        "kind": 6,
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "peekOfCode": "class BoxplotMixin:\n    \"\"\"Mixin class for boxplot-related visualizations\"\"\"\n    def plot_boxplot(self, boxplot_data: pd.DataFrame, figsize: tuple = (12, 6)):\n        \"\"\"\n        Create boxplot comparing glycan types between groups with statistical significance\n        Args:\n            boxplot_data: Long-format DataFrame from analyzer\n            figsize: Figure size\n        \"\"\"\n        fig, ax = plt.subplots(figsize=figsize)",
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BoxplotMixin:\n    \"\"\"Mixin class for boxplot-related visualizations\"\"\"\n    def plot_boxplot(self, boxplot_data: pd.DataFrame, figsize: tuple = (12, 6)):\n        \"\"\"\n        Create boxplot comparing glycan types between groups with statistical significance\n        Args:\n            boxplot_data: Long-format DataFrame from analyzer\n            figsize: Figure size\n        \"\"\"",
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "DistributionPlotMixin",
        "kind": 6,
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "peekOfCode": "class DistributionPlotMixin:\n    \"\"\"Mixin class for distribution-related plots\"\"\"\n    def plot_glycan_type_distribution(self, df: pd.DataFrame, figsize: tuple = (10, 6)):\n        \"\"\"\n        Create bar plot showing distribution of glycan types\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"\n        fig, ax = plt.subplots(figsize=figsize)",
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DistributionPlotMixin:\n    \"\"\"Mixin class for distribution-related plots\"\"\"\n    def plot_glycan_type_distribution(self, df: pd.DataFrame, figsize: tuple = (10, 6)):\n        \"\"\"\n        Create bar plot showing distribution of glycan types\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"",
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "HeatmapMixin",
        "kind": 6,
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "peekOfCode": "class HeatmapMixin:\n    \"\"\"Mixin class for heatmap-related plots\"\"\"\n    def plot_heatmap(self, df: pd.DataFrame, figsize: tuple = (16, 12), top_n: int = 50):\n        \"\"\"\n        Create clustered heatmap of top glycopeptides with hierarchical clustering\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n            top_n: Number of top glycopeptides to show\n        \"\"\"",
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HeatmapMixin:\n    \"\"\"Mixin class for heatmap-related plots\"\"\"\n    def plot_heatmap(self, df: pd.DataFrame, figsize: tuple = (16, 12), top_n: int = 50):\n        \"\"\"\n        Create clustered heatmap of top glycopeptides with hierarchical clustering\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n            top_n: Number of top glycopeptides to show",
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "HistogramMixin",
        "kind": 6,
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "peekOfCode": "class HistogramMixin:\n    \"\"\"Mixin class for histogram-related plots\"\"\"\n    def plot_histogram_normalized(self, df: pd.DataFrame, figsize: tuple = (20, 12)):\n        \"\"\"\n        Create histogram showing glycan type intensities per sample (TIC normalized data)\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"\n        # Identify sample columns",
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HistogramMixin:\n    \"\"\"Mixin class for histogram-related plots\"\"\"\n    def plot_histogram_normalized(self, df: pd.DataFrame, figsize: tuple = (20, 12)):\n        \"\"\"\n        Create histogram showing glycan type intensities per sample (TIC normalized data)\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"",
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "PCAPlotMixin",
        "kind": 6,
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "peekOfCode": "class PCAPlotMixin:\n    \"\"\"Mixin class for PCA-related plots\"\"\"\n    def _draw_confidence_ellipse(self, ax, x, y, color, alpha=0.2, n_std=1.96):\n        \"\"\"\n        Draw 95% confidence ellipse for a group of points\n        Args:\n            ax: Matplotlib axis\n            x, y: Data points\n            color: Ellipse color\n            alpha: Transparency",
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PCAPlotMixin:\n    \"\"\"Mixin class for PCA-related plots\"\"\"\n    def _draw_confidence_ellipse(self, ax, x, y, color, alpha=0.2, n_std=1.96):\n        \"\"\"\n        Draw 95% confidence ellipse for a group of points\n        Args:\n            ax: Matplotlib axis\n            x, y: Data points\n            color: Ellipse color",
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotMixin",
        "kind": 6,
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "peekOfCode": "class VIPScorePlotMixin:\n    \"\"\"Mixin class for VIP score-related plots\"\"\"\n    def plot_vip_scores_glycopeptide(self, df: pd.DataFrame, vip_df: pd.DataFrame, figsize: tuple = (14, 10), top_n: int = 30):\n        \"\"\"\n        Plot top VIP scores by glycopeptide with heatmap showing Cancer/Normal intensity\n        Args:\n            df: Annotated DataFrame\n            vip_df: DataFrame with VIP scores by glycopeptide\n            figsize: Figure size\n            top_n: Number of top glycopeptides to show",
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass VIPScorePlotMixin:\n    \"\"\"Mixin class for VIP score-related plots\"\"\"\n    def plot_vip_scores_glycopeptide(self, df: pd.DataFrame, vip_df: pd.DataFrame, figsize: tuple = (14, 10), top_n: int = 30):\n        \"\"\"\n        Plot top VIP scores by glycopeptide with heatmap showing Cancer/Normal intensity\n        Args:\n            df: Annotated DataFrame\n            vip_df: DataFrame with VIP scores by glycopeptide\n            figsize: Figure size",
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "GlycanAnalyzer",
        "kind": 6,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "class GlycanAnalyzer:\n    \"\"\"Perform statistical analysis on glycoproteomics data\"\"\"\n    def __init__(self, n_components: int = 2, log_transform: bool = True):\n        \"\"\"\n        Initialize GlycanAnalyzer\n        Args:\n            n_components: Number of PCA components\n            log_transform: Whether to log-transform intensity values\n        \"\"\"\n        self.n_components = n_components",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycanAnalyzer:\n    \"\"\"Perform statistical analysis on glycoproteomics data\"\"\"\n    def __init__(self, n_components: int = 2, log_transform: bool = True):\n        \"\"\"\n        Initialize GlycanAnalyzer\n        Args:\n            n_components: Number of PCA components\n            log_transform: Whether to log-transform intensity values\n        \"\"\"",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "GlycanAnnotator",
        "kind": 6,
        "importPath": "src.annotator",
        "description": "src.annotator",
        "peekOfCode": "class GlycanAnnotator:\n    \"\"\"Annotate glycopeptides based on glycan composition\"\"\"\n    def __init__(self, sialylation_marker: str = \"A\", fucosylation_marker: str = \"F\"):\n        \"\"\"\n        Initialize GlycanAnnotator\n        Args:\n            sialylation_marker: Marker for sialylation (default: 'A' for NeuAc)\n            fucosylation_marker: Marker for fucosylation (default: 'F')\n        \"\"\"\n        self.sialylation_marker = sialylation_marker",
        "detail": "src.annotator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.annotator",
        "description": "src.annotator",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycanAnnotator:\n    \"\"\"Annotate glycopeptides based on glycan composition\"\"\"\n    def __init__(self, sialylation_marker: str = \"A\", fucosylation_marker: str = \"F\"):\n        \"\"\"\n        Initialize GlycanAnnotator\n        Args:\n            sialylation_marker: Marker for sialylation (default: 'A' for NeuAc)\n            fucosylation_marker: Marker for fucosylation (default: 'F')\n        \"\"\"",
        "detail": "src.annotator",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "src.data_loader",
        "description": "src.data_loader",
        "peekOfCode": "class DataLoader:\n    \"\"\"Load and integrate glycoproteomics data from multiple CSV files\"\"\"\n    def __init__(self, dataset_dir: str, required_columns: List[str]):\n        \"\"\"\n        Initialize DataLoader\n        Args:\n            dataset_dir: Path to directory containing CSV files\n            required_columns: List of required column names\n        \"\"\"\n        self.dataset_dir = Path(dataset_dir)",
        "detail": "src.data_loader",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.data_loader",
        "description": "src.data_loader",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DataLoader:\n    \"\"\"Load and integrate glycoproteomics data from multiple CSV files\"\"\"\n    def __init__(self, dataset_dir: str, required_columns: List[str]):\n        \"\"\"\n        Initialize DataLoader\n        Args:\n            dataset_dir: Path to directory containing CSV files\n            required_columns: List of required column names\n        \"\"\"",
        "detail": "src.data_loader",
        "documentation": {}
    },
    {
        "label": "GlycanVisualizer",
        "kind": 6,
        "importPath": "src.visualizer",
        "description": "src.visualizer",
        "peekOfCode": "class GlycanVisualizer(\n    PCAPlotMixin,\n    BoxplotMixin,\n    HeatmapMixin,\n    HistogramMixin,\n    VIPScorePlotMixin,\n    DistributionPlotMixin\n):\n    \"\"\"Create visualizations for glycoproteomics data\"\"\"\n    def __init__(self, output_dir: str, dpi: int = 300, colors: dict = None):",
        "detail": "src.visualizer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.visualizer",
        "description": "src.visualizer",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycanVisualizer(\n    PCAPlotMixin,\n    BoxplotMixin,\n    HeatmapMixin,\n    HistogramMixin,\n    VIPScorePlotMixin,\n    DistributionPlotMixin\n):\n    \"\"\"Create visualizations for glycoproteomics data\"\"\"",
        "detail": "src.visualizer",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_config(config_path: str = 'config.yaml') -> dict:\n    \"\"\"Load configuration from YAML file\"\"\"\n    with open(config_path, 'r') as f:\n        config = yaml.safe_load(f)\n    return config\ndef main():\n    \"\"\"Main pipeline execution\"\"\"\n    logger.info(\"=\"*80)\n    logger.info(\"pGlyco Auto Combine - Glycoproteomics Data Analysis Pipeline\")\n    logger.info(\"=\"*80)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    \"\"\"Main pipeline execution\"\"\"\n    logger.info(\"=\"*80)\n    logger.info(\"pGlyco Auto Combine - Glycoproteomics Data Analysis Pipeline\")\n    logger.info(\"=\"*80)\n    # Load configuration\n    logger.info(\"\\n[1/6] Loading configuration...\")\n    config = load_config('config.yaml')\n    # Paths\n    dataset_dir = config['paths']['dataset_dir']",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef load_config(config_path: str = 'config.yaml') -> dict:\n    \"\"\"Load configuration from YAML file\"\"\"\n    with open(config_path, 'r') as f:\n        config = yaml.safe_load(f)\n    return config\ndef main():\n    \"\"\"Main pipeline execution\"\"\"\n    logger.info(\"=\"*80)\n    logger.info(\"pGlyco Auto Combine - Glycoproteomics Data Analysis Pipeline\")",
        "detail": "main",
        "documentation": {}
    }
]