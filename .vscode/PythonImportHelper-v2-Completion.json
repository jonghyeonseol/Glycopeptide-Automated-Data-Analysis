[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "pearsonr",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "Ellipse",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "LinearSegmentedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "adjust_text",
        "importPath": "adjustText",
        "description": "adjustText",
        "isExtraImport": true,
        "detail": "adjustText",
        "documentation": {}
    },
    {
        "label": "adjust_text",
        "importPath": "adjustText",
        "description": "adjustText",
        "isExtraImport": true,
        "detail": "adjustText",
        "documentation": {}
    },
    {
        "label": "venn3",
        "importPath": "matplotlib_venn",
        "description": "matplotlib_venn",
        "isExtraImport": true,
        "detail": "matplotlib_venn",
        "documentation": {}
    },
    {
        "label": "venn3_circles",
        "importPath": "matplotlib_venn",
        "description": "matplotlib_venn",
        "isExtraImport": true,
        "detail": "matplotlib_venn",
        "documentation": {}
    },
    {
        "label": "GridSpec",
        "importPath": "matplotlib.gridspec",
        "description": "matplotlib.gridspec",
        "isExtraImport": true,
        "detail": "matplotlib.gridspec",
        "documentation": {}
    },
    {
        "label": "rpy2.robjects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rpy2.robjects",
        "description": "rpy2.robjects",
        "detail": "rpy2.robjects",
        "documentation": {}
    },
    {
        "label": "pandas2ri",
        "importPath": "rpy2.robjects",
        "description": "rpy2.robjects",
        "isExtraImport": true,
        "detail": "rpy2.robjects",
        "documentation": {}
    },
    {
        "label": "importr",
        "importPath": "rpy2.robjects.packages",
        "description": "rpy2.robjects.packages",
        "isExtraImport": true,
        "detail": "rpy2.robjects.packages",
        "documentation": {}
    },
    {
        "label": "localconverter",
        "importPath": "rpy2.robjects.conversion",
        "description": "rpy2.robjects.conversion",
        "isExtraImport": true,
        "detail": "rpy2.robjects.conversion",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "RobustScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PLSRegression",
        "importPath": "sklearn.cross_decomposition",
        "description": "sklearn.cross_decomposition",
        "isExtraImport": true,
        "detail": "sklearn.cross_decomposition",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "PCAPlotMixin",
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "isExtraImport": true,
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "BoxplotMixin",
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "isExtraImport": true,
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "HeatmapMixin",
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "isExtraImport": true,
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "HistogramMixin",
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "isExtraImport": true,
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotMixin",
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "isExtraImport": true,
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotRMixin",
        "importPath": "src.plots.vip_score_plot_r",
        "description": "src.plots.vip_score_plot_r",
        "isExtraImport": true,
        "detail": "src.plots.vip_score_plot_r",
        "documentation": {}
    },
    {
        "label": "DistributionPlotMixin",
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "isExtraImport": true,
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "VolcanoPlotMixin",
        "importPath": "src.plots.volcano_plot",
        "description": "src.plots.volcano_plot",
        "isExtraImport": true,
        "detail": "src.plots.volcano_plot",
        "documentation": {}
    },
    {
        "label": "SiteSpecificHeatmapMixin",
        "importPath": "src.plots.site_specific_heatmap",
        "description": "src.plots.site_specific_heatmap",
        "isExtraImport": true,
        "detail": "src.plots.site_specific_heatmap",
        "documentation": {}
    },
    {
        "label": "CVDistributionPlotMixin",
        "importPath": "src.plots.cv_distribution_plot",
        "description": "src.plots.cv_distribution_plot",
        "isExtraImport": true,
        "detail": "src.plots.cv_distribution_plot",
        "documentation": {}
    },
    {
        "label": "CorrelationMatrixPlotMixin",
        "importPath": "src.plots.correlation_matrix_plot",
        "description": "src.plots.correlation_matrix_plot",
        "isExtraImport": true,
        "detail": "src.plots.correlation_matrix_plot",
        "documentation": {}
    },
    {
        "label": "VennDiagramPlotMixin",
        "importPath": "src.plots.venn_diagram_plot",
        "description": "src.plots.venn_diagram_plot",
        "isExtraImport": true,
        "detail": "src.plots.venn_diagram_plot",
        "documentation": {}
    },
    {
        "label": "RadarChartPlotMixin",
        "importPath": "src.plots.radar_chart_plot",
        "description": "src.plots.radar_chart_plot",
        "isExtraImport": true,
        "detail": "src.plots.radar_chart_plot",
        "documentation": {}
    },
    {
        "label": "GlycopeptideDotHeatmapMixin",
        "importPath": "src.plots.glycopeptide_dot_heatmap",
        "description": "src.plots.glycopeptide_dot_heatmap",
        "isExtraImport": true,
        "detail": "src.plots.glycopeptide_dot_heatmap",
        "documentation": {}
    },
    {
        "label": "GlycopeptideComparisonHeatmapMixin",
        "importPath": "src.plots.glycopeptide_comparison_heatmap",
        "description": "src.plots.glycopeptide_comparison_heatmap",
        "isExtraImport": true,
        "detail": "src.plots.glycopeptide_comparison_heatmap",
        "documentation": {}
    },
    {
        "label": "PieChartPlotMixin",
        "importPath": "src.plots.pie_chart_plot",
        "description": "src.plots.pie_chart_plot",
        "isExtraImport": true,
        "detail": "src.plots.pie_chart_plot",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "DataPreparationConfig",
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "isExtraImport": true,
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "calculate_group_statistics_standardized",
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "isExtraImport": true,
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "prepare_visualization_data",
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "isExtraImport": true,
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "filter_by_detection_frequency",
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "isExtraImport": true,
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "get_standard_config_from_dict",
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "isExtraImport": true,
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "DataConsistencyValidator",
        "importPath": "src.data_validator",
        "description": "src.data_validator",
        "isExtraImport": true,
        "detail": "src.data_validator",
        "documentation": {}
    },
    {
        "label": "quick_consistency_check",
        "importPath": "src.data_validator",
        "description": "src.data_validator",
        "isExtraImport": true,
        "detail": "src.data_validator",
        "documentation": {}
    },
    {
        "label": "load_and_validate_config",
        "importPath": "src.config_validator",
        "description": "src.config_validator",
        "isExtraImport": true,
        "detail": "src.config_validator",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "isExtraImport": true,
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "isExtraImport": true,
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "src.data_loader",
        "description": "src.data_loader",
        "isExtraImport": true,
        "detail": "src.data_loader",
        "documentation": {}
    },
    {
        "label": "GlycanAnnotator",
        "importPath": "src.annotator",
        "description": "src.annotator",
        "isExtraImport": true,
        "detail": "src.annotator",
        "documentation": {}
    },
    {
        "label": "GlycanAnalyzer",
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "isExtraImport": true,
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "GlycanVisualizer",
        "importPath": "src.visualizer",
        "description": "src.visualizer",
        "isExtraImport": true,
        "detail": "src.visualizer",
        "documentation": {}
    },
    {
        "label": "PGlycoAutoError",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "OUTPUT_INTEGRATED",
        "importPath": "src.constants",
        "description": "src.constants",
        "isExtraImport": true,
        "detail": "src.constants",
        "documentation": {}
    },
    {
        "label": "OUTPUT_STATISTICS",
        "importPath": "src.constants",
        "description": "src.constants",
        "isExtraImport": true,
        "detail": "src.constants",
        "documentation": {}
    },
    {
        "label": "OUTPUT_VIP_SCORES",
        "importPath": "src.constants",
        "description": "src.constants",
        "isExtraImport": true,
        "detail": "src.constants",
        "documentation": {}
    },
    {
        "label": "OUTPUT_SUMMARY",
        "importPath": "src.constants",
        "description": "src.constants",
        "isExtraImport": true,
        "detail": "src.constants",
        "documentation": {}
    },
    {
        "label": "verify_heatmap_data",
        "kind": 2,
        "importPath": "scripts.verify_trace_data",
        "description": "scripts.verify_trace_data",
        "peekOfCode": "def verify_heatmap_data():\n    \"\"\"Comprehensive verification of trace data\"\"\"\n    print(\"=\"*80)\n    print(\"Verification of Glycopeptide Comparison Heatmap Trace Data\")\n    print(\"=\"*80)\n    # Check if files exist\n    summary_path = Path('Results/Trace/glycopeptide_comparison_heatmap_summary.csv')\n    full_data_path = Path('Results/Trace/glycopeptide_comparison_heatmap_data.csv')\n    if not summary_path.exists():\n        print(f\"\\n❌ ERROR: Summary file not found at {summary_path}\")",
        "detail": "scripts.verify_trace_data",
        "documentation": {}
    },
    {
        "label": "BoxplotMixin",
        "kind": 6,
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "peekOfCode": "class BoxplotMixin:\n    \"\"\"Mixin class for boxplot-related visualizations\"\"\"\n    def plot_boxplot(self, boxplot_data: pd.DataFrame, figsize: tuple = None):\n        \"\"\"\n        Create boxplot comparing glycan types between groups with statistical significance\n        Args:\n            boxplot_data: Long-format DataFrame from analyzer\n            figsize: Figure size (default: from plot_config)\n        \"\"\"\n        if figsize is None:",
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.boxplot",
        "description": "src.plots.boxplot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BoxplotMixin:\n    \"\"\"Mixin class for boxplot-related visualizations\"\"\"\n    def plot_boxplot(self, boxplot_data: pd.DataFrame, figsize: tuple = None):\n        \"\"\"\n        Create boxplot comparing glycan types between groups with statistical significance\n        Args:\n            boxplot_data: Long-format DataFrame from analyzer\n            figsize: Figure size (default: from plot_config)\n        \"\"\"",
        "detail": "src.plots.boxplot",
        "documentation": {}
    },
    {
        "label": "CorrelationMatrixPlotMixin",
        "kind": 6,
        "importPath": "src.plots.correlation_matrix_plot",
        "description": "src.plots.correlation_matrix_plot",
        "peekOfCode": "class CorrelationMatrixPlotMixin:\n    \"\"\"Mixin class for correlation matrix visualization\"\"\"\n    def plot_correlation_matrix(self, df: pd.DataFrame, figsize: tuple = (20, 18)):\n        \"\"\"\n        Create correlation matrix heatmap for samples\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"\n        # Get sample columns",
        "detail": "src.plots.correlation_matrix_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.correlation_matrix_plot",
        "description": "src.plots.correlation_matrix_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CorrelationMatrixPlotMixin:\n    \"\"\"Mixin class for correlation matrix visualization\"\"\"\n    def plot_correlation_matrix(self, df: pd.DataFrame, figsize: tuple = (20, 18)):\n        \"\"\"\n        Create correlation matrix heatmap for samples\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"",
        "detail": "src.plots.correlation_matrix_plot",
        "documentation": {}
    },
    {
        "label": "CVDistributionPlotMixin",
        "kind": 6,
        "importPath": "src.plots.cv_distribution_plot",
        "description": "src.plots.cv_distribution_plot",
        "peekOfCode": "class CVDistributionPlotMixin:\n    \"\"\"Mixin class for CV distribution visualization\"\"\"\n    def plot_cv_distribution(self, df: pd.DataFrame, figsize: tuple = (14, 6)):\n        \"\"\"\n        Create CV (Coefficient of Variation) distribution plots for Cancer and Normal samples\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"\n        # Get sample columns",
        "detail": "src.plots.cv_distribution_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.cv_distribution_plot",
        "description": "src.plots.cv_distribution_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CVDistributionPlotMixin:\n    \"\"\"Mixin class for CV distribution visualization\"\"\"\n    def plot_cv_distribution(self, df: pd.DataFrame, figsize: tuple = (14, 6)):\n        \"\"\"\n        Create CV (Coefficient of Variation) distribution plots for Cancer and Normal samples\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"",
        "detail": "src.plots.cv_distribution_plot",
        "documentation": {}
    },
    {
        "label": "DistributionPlotMixin",
        "kind": 6,
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "peekOfCode": "class DistributionPlotMixin:\n    \"\"\"Mixin class for distribution-related plots\"\"\"\n    def plot_glycan_type_distribution(self, df: pd.DataFrame, figsize: tuple = (10, 6)):\n        \"\"\"\n        Create bar plot showing distribution of glycan types\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"\n        fig, ax = plt.subplots(figsize=figsize)",
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.distribution_plot",
        "description": "src.plots.distribution_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DistributionPlotMixin:\n    \"\"\"Mixin class for distribution-related plots\"\"\"\n    def plot_glycan_type_distribution(self, df: pd.DataFrame, figsize: tuple = (10, 6)):\n        \"\"\"\n        Create bar plot showing distribution of glycan types\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"",
        "detail": "src.plots.distribution_plot",
        "documentation": {}
    },
    {
        "label": "GlycopeptideComparisonHeatmapMixin",
        "kind": 6,
        "importPath": "src.plots.glycopeptide_comparison_heatmap",
        "description": "src.plots.glycopeptide_comparison_heatmap",
        "peekOfCode": "class GlycopeptideComparisonHeatmapMixin:\n    \"\"\"Mixin class for glycopeptide comparison heatmap (Cancer vs Normal)\"\"\"\n    def plot_glycopeptide_comparison_heatmap(\n        self,\n        df: pd.DataFrame,\n        vip_scores: pd.DataFrame,\n        config: DataPreparationConfig = None,\n        figsize: tuple = (24, 16),\n        max_peptides: int = 50,\n        max_glycans_per_type: int = 15",
        "detail": "src.plots.glycopeptide_comparison_heatmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.glycopeptide_comparison_heatmap",
        "description": "src.plots.glycopeptide_comparison_heatmap",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycopeptideComparisonHeatmapMixin:\n    \"\"\"Mixin class for glycopeptide comparison heatmap (Cancer vs Normal)\"\"\"\n    def plot_glycopeptide_comparison_heatmap(\n        self,\n        df: pd.DataFrame,\n        vip_scores: pd.DataFrame,\n        config: DataPreparationConfig = None,\n        figsize: tuple = (24, 16),\n        max_peptides: int = 50,",
        "detail": "src.plots.glycopeptide_comparison_heatmap",
        "documentation": {}
    },
    {
        "label": "GlycopeptideDotHeatmapMixin",
        "kind": 6,
        "importPath": "src.plots.glycopeptide_dot_heatmap",
        "description": "src.plots.glycopeptide_dot_heatmap",
        "peekOfCode": "class GlycopeptideDotHeatmapMixin:\n    \"\"\"Mixin class for glycopeptide dot heatmap visualization\"\"\"\n    def plot_glycopeptide_dot_heatmap(\n        self,\n        df: pd.DataFrame,\n        vip_scores: pd.DataFrame,\n        sample_name: str,\n        figsize: tuple = (20, 14),\n        max_peptides: int = 50,\n        max_glycans_per_type: int = 20",
        "detail": "src.plots.glycopeptide_dot_heatmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.glycopeptide_dot_heatmap",
        "description": "src.plots.glycopeptide_dot_heatmap",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycopeptideDotHeatmapMixin:\n    \"\"\"Mixin class for glycopeptide dot heatmap visualization\"\"\"\n    def plot_glycopeptide_dot_heatmap(\n        self,\n        df: pd.DataFrame,\n        vip_scores: pd.DataFrame,\n        sample_name: str,\n        figsize: tuple = (20, 14),\n        max_peptides: int = 50,",
        "detail": "src.plots.glycopeptide_dot_heatmap",
        "documentation": {}
    },
    {
        "label": "HeatmapMixin",
        "kind": 6,
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "peekOfCode": "class HeatmapMixin:\n    \"\"\"Mixin class for heatmap-related plots\"\"\"\n    def plot_heatmap(self, df: pd.DataFrame, figsize: tuple = (16, 12), top_n: int = 50):\n        \"\"\"\n        Create clustered heatmap of top glycopeptides with hierarchical clustering\n        Pipeline: TIC Normalization → Log2 Transform → Hierarchical Clustering\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n            top_n: Number of top glycopeptides to show",
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.heatmap",
        "description": "src.plots.heatmap",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HeatmapMixin:\n    \"\"\"Mixin class for heatmap-related plots\"\"\"\n    def plot_heatmap(self, df: pd.DataFrame, figsize: tuple = (16, 12), top_n: int = 50):\n        \"\"\"\n        Create clustered heatmap of top glycopeptides with hierarchical clustering\n        Pipeline: TIC Normalization → Log2 Transform → Hierarchical Clustering\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size",
        "detail": "src.plots.heatmap",
        "documentation": {}
    },
    {
        "label": "HistogramMixin",
        "kind": 6,
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "peekOfCode": "class HistogramMixin:\n    \"\"\"Mixin class for histogram-related plots\"\"\"\n    def plot_histogram_normalized(self, df: pd.DataFrame, figsize: tuple = (20, 12)):\n        \"\"\"\n        Create histogram showing glycan type intensities per sample (TIC normalized data)\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"\n        # Identify sample columns",
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.histogram",
        "description": "src.plots.histogram",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HistogramMixin:\n    \"\"\"Mixin class for histogram-related plots\"\"\"\n    def plot_histogram_normalized(self, df: pd.DataFrame, figsize: tuple = (20, 12)):\n        \"\"\"\n        Create histogram showing glycan type intensities per sample (TIC normalized data)\n        Args:\n            df: Annotated DataFrame\n            figsize: Figure size\n        \"\"\"",
        "detail": "src.plots.histogram",
        "documentation": {}
    },
    {
        "label": "PCAPlotMixin",
        "kind": 6,
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "peekOfCode": "class PCAPlotMixin:\n    \"\"\"Mixin class for PCA-related plots\"\"\"\n    def _draw_confidence_ellipse(self, ax, x, y, color, alpha=0.2, n_std=1.96):\n        \"\"\"\n        Draw 95% confidence ellipse for a group of points\n        Args:\n            ax: Matplotlib axis\n            x, y: Data points\n            color: Ellipse color\n            alpha: Transparency",
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.pca_plot",
        "description": "src.plots.pca_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PCAPlotMixin:\n    \"\"\"Mixin class for PCA-related plots\"\"\"\n    def _draw_confidence_ellipse(self, ax, x, y, color, alpha=0.2, n_std=1.96):\n        \"\"\"\n        Draw 95% confidence ellipse for a group of points\n        Args:\n            ax: Matplotlib axis\n            x, y: Data points\n            color: Ellipse color",
        "detail": "src.plots.pca_plot",
        "documentation": {}
    },
    {
        "label": "PieChartPlotMixin",
        "kind": 6,
        "importPath": "src.plots.pie_chart_plot",
        "description": "src.plots.pie_chart_plot",
        "peekOfCode": "class PieChartPlotMixin:\n    \"\"\"Mixin class for pie chart visualizations\"\"\"\n    def plot_pie_chart_glycan_types(self, df: pd.DataFrame, figsize: tuple = (16, 8)):\n        \"\"\"\n        Create side-by-side pie charts showing glycan type distribution (Cancer vs Normal)\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"\n        logger.info(\"Creating glycan type distribution pie charts...\")",
        "detail": "src.plots.pie_chart_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.pie_chart_plot",
        "description": "src.plots.pie_chart_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PieChartPlotMixin:\n    \"\"\"Mixin class for pie chart visualizations\"\"\"\n    def plot_pie_chart_glycan_types(self, df: pd.DataFrame, figsize: tuple = (16, 8)):\n        \"\"\"\n        Create side-by-side pie charts showing glycan type distribution (Cancer vs Normal)\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"",
        "detail": "src.plots.pie_chart_plot",
        "documentation": {}
    },
    {
        "label": "apply_standard_axis_style",
        "kind": 2,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "def apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):\n    \"\"\"\n    Apply Prism-inspired standardized styling to matplotlib axes\n    Args:\n        ax: Matplotlib axes object\n        xlabel: X-axis label text\n        ylabel: Y-axis label text\n        title: Plot title text\n        grid: Whether to show gridlines (Prism style: minimal, only Y-axis)\n    \"\"\"",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "apply_standard_legend",
        "kind": 2,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "def apply_standard_legend(ax, **kwargs):\n    \"\"\"\n    Apply Prism-inspired standardized legend styling\n    Legend positioned OUTSIDE plot area by default (non-interruptive)\n    Args:\n        ax: Matplotlib axes object\n        **kwargs: Additional legend parameters\n    \"\"\"\n    legend_params = {\n        'fontsize': LEGEND_SIZE,",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "TITLE_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "TITLE_SIZE = 16  # Increased for better visibility\nAXIS_LABEL_SIZE = 14  # Increased - must be clearly readable\nTICK_LABEL_SIZE = 12  # Increased - critical for data interpretation\nLEGEND_SIZE = 12  # Increased for accessibility\nLEGEND_TITLE_SIZE = 13\nANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "AXIS_LABEL_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "AXIS_LABEL_SIZE = 14  # Increased - must be clearly readable\nTICK_LABEL_SIZE = 12  # Increased - critical for data interpretation\nLEGEND_SIZE = 12  # Increased for accessibility\nLEGEND_TITLE_SIZE = 13\nANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "TICK_LABEL_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "TICK_LABEL_SIZE = 12  # Increased - critical for data interpretation\nLEGEND_SIZE = 12  # Increased for accessibility\nLEGEND_TITLE_SIZE = 13\nANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_SIZE = 12  # Increased for accessibility\nLEGEND_TITLE_SIZE = 13\nANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_TITLE_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_TITLE_SIZE = 13\nANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "ANNOTATION_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "ANNOTATION_SIZE = 11  # Increased - annotations must be readable\n# Font Weights (Prism uses regular weight more often for cleaner look)\nTITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast\n# ==============================================================================\n# Using Prism's bold, professional colors",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "TITLE_WEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "TITLE_WEIGHT = 'bold'\nAXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast\n# ==============================================================================\n# Using Prism's bold, professional colors\nCOLOR_CANCER = '#FF0000'  # Pure red - bold, unmistakable (from Prism \"colors\" palette)\nCOLOR_NORMAL = '#0072B2'  # Science blue - professional, colorblind-safe",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "AXIS_LABEL_WEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "AXIS_LABEL_WEIGHT = 'normal'  # Changed from bold - cleaner\nLEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast\n# ==============================================================================\n# Using Prism's bold, professional colors\nCOLOR_CANCER = '#FF0000'  # Pure red - bold, unmistakable (from Prism \"colors\" palette)\nCOLOR_NORMAL = '#0072B2'  # Science blue - professional, colorblind-safe\nGROUP_PALETTE = {",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_TITLE_WEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_TITLE_WEIGHT = 'bold'\n# ==============================================================================\n# Colors - Group Comparison (Cancer vs Normal)\n# Prism-inspired: Bold, saturated, high contrast\n# ==============================================================================\n# Using Prism's bold, professional colors\nCOLOR_CANCER = '#FF0000'  # Pure red - bold, unmistakable (from Prism \"colors\" palette)\nCOLOR_NORMAL = '#0072B2'  # Science blue - professional, colorblind-safe\nGROUP_PALETTE = {\n    'Cancer': COLOR_CANCER,",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "COLOR_CANCER",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "COLOR_CANCER = '#FF0000'  # Pure red - bold, unmistakable (from Prism \"colors\" palette)\nCOLOR_NORMAL = '#0072B2'  # Science blue - professional, colorblind-safe\nGROUP_PALETTE = {\n    'Cancer': COLOR_CANCER,\n    'Normal': COLOR_NORMAL\n}\n# ==============================================================================\n# Colors - Glycan Types (Scientific Color Scheme)\n# ==============================================================================\n# SCIENTIFIC COLOR SCHEME - Biologically meaningful colors",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "COLOR_NORMAL",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "COLOR_NORMAL = '#0072B2'  # Science blue - professional, colorblind-safe\nGROUP_PALETTE = {\n    'Cancer': COLOR_CANCER,\n    'Normal': COLOR_NORMAL\n}\n# ==============================================================================\n# Colors - Glycan Types (Scientific Color Scheme)\n# ==============================================================================\n# SCIENTIFIC COLOR SCHEME - Biologically meaningful colors\n# Green = High Mannose (early biosynthesis)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GROUP_PALETTE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GROUP_PALETTE = {\n    'Cancer': COLOR_CANCER,\n    'Normal': COLOR_NORMAL\n}\n# ==============================================================================\n# Colors - Glycan Types (Scientific Color Scheme)\n# ==============================================================================\n# SCIENTIFIC COLOR SCHEME - Biologically meaningful colors\n# Green = High Mannose (early biosynthesis)\n# Red = Fucosylated (terminal modification)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GLYCAN_COLORS",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GLYCAN_COLORS = {\n    'HM': '#2ECC71',    # Green - High Mannose\n    'F': '#E74C3C',     # Red - Fucosylated\n    'S': '#FF69B4',     # Pink - Sialylated\n    'SF': '#FF8C00',    # Orange - Sialofucosylated\n    'C/H': '#3498DB'    # Blue - Complex/Hybrid\n}\n# Legacy glycan type colors (for backward compatibility)\nLEGACY_GLYCAN_COLORS = {\n    'Non': '#95A5A6',       # Gray - Non-modified",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGACY_GLYCAN_COLORS",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGACY_GLYCAN_COLORS = {\n    'Non': '#95A5A6',       # Gray - Non-modified\n    'Sialylated': '#FF69B4',   # Pink - Sialylated\n    'Fucosylated': '#E74C3C',  # Red - Fucosylated\n    'Both': '#FF8C00'          # Orange - Sialofucosylated\n}\n# Extended category colors (scientific scheme)\nEXTENDED_CATEGORY_COLORS = {\n    'HM': '#2ECC71',              # Green - High Mannose\n    'High mannose': '#2ECC71',    # Alias for consistency",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "EXTENDED_CATEGORY_COLORS",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "EXTENDED_CATEGORY_COLORS = {\n    'HM': '#2ECC71',              # Green - High Mannose\n    'High mannose': '#2ECC71',    # Alias for consistency\n    'High Mannose': '#2ECC71',    # Alias (capitalized)\n    'C/H': '#3498DB',             # Blue - Complex/Hybrid\n    'Complex/Hybrid': '#3498DB',  # Alias\n    'ComplexHybrid': '#3498DB',   # Alias (no space/slash)\n    'Fucosylated': '#E74C3C',     # Red - Fucosylated\n    'Sialylated': '#FF69B4',      # Pink - Sialylated\n    'Sialofucosylated': '#FF8C00', # Orange - Sialofucosylated",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "DPI",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "DPI = 300  # Publication quality\n# Grid settings (Prism style: minimal, subtle)\nGRID_ALPHA = 0.15  # Much lighter (was 0.3)\nGRID_LINESTYLE = '-'  # Solid, not dashed (Prism style)\nGRID_LINEWIDTH = 0.5\nGRID_COLOR = '#E0E0E0'  # Light gray, not pure gray\n# Legend settings (Prism style: clean, no shadow)\nLEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GRID_ALPHA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GRID_ALPHA = 0.15  # Much lighter (was 0.3)\nGRID_LINESTYLE = '-'  # Solid, not dashed (Prism style)\nGRID_LINEWIDTH = 0.5\nGRID_COLOR = '#E0E0E0'  # Light gray, not pure gray\n# Legend settings (Prism style: clean, no shadow)\nLEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GRID_LINESTYLE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GRID_LINESTYLE = '-'  # Solid, not dashed (Prism style)\nGRID_LINEWIDTH = 0.5\nGRID_COLOR = '#E0E0E0'  # Light gray, not pure gray\n# Legend settings (Prism style: clean, no shadow)\nLEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GRID_LINEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GRID_LINEWIDTH = 0.5\nGRID_COLOR = '#E0E0E0'  # Light gray, not pure gray\n# Legend settings (Prism style: clean, no shadow)\nLEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "GRID_COLOR",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "GRID_COLOR = '#E0E0E0'  # Light gray, not pure gray\n# Legend settings (Prism style: clean, no shadow)\nLEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_FRAMEON",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_FRAMEON = True\nLEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_FANCYBOX",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_FANCYBOX = False  # Square corners (Prism style)\nLEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)\nBOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_SHADOW",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_SHADOW = False     # No shadow (cleaner)\nLEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)\nBOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)\nBOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_FRAMEALPHA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_FRAMEALPHA = 1.0   # Solid background (was 0.9)\nLEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)\nBOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)\nBOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact\nBOXPLOT_EXTENDED_FIGSIZE = (12, 6)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_EDGECOLOR",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_EDGECOLOR = '#000000'  # Black border\nLEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)\nBOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)\nBOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact\nBOXPLOT_EXTENDED_FIGSIZE = (12, 6)\nBOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "LEGEND_FRAMEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "LEGEND_FRAMEWIDTH = 1.0\n# ==============================================================================\n# Plot-Specific Settings (Prism-inspired: Bolder data elements)\n# ==============================================================================\n# Boxplot (Prism style: larger, bolder)\nBOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)\nBOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact\nBOXPLOT_EXTENDED_FIGSIZE = (12, 6)\nBOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)\nBOXPLOT_FLIERSIZE = 6  # Larger outlier markers",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "BOXPLOT_WIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "BOXPLOT_WIDTH = 0.7  # Wider boxes (was 0.6)\nBOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact\nBOXPLOT_EXTENDED_FIGSIZE = (12, 6)\nBOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)\nBOXPLOT_FLIERSIZE = 6  # Larger outlier markers\n# Histogram\nHISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "BOXPLOT_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "BOXPLOT_FIGSIZE = (10, 6)  # Slightly more compact\nBOXPLOT_EXTENDED_FIGSIZE = (12, 6)\nBOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)\nBOXPLOT_FLIERSIZE = 6  # Larger outlier markers\n# Histogram\nHISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "BOXPLOT_EXTENDED_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "BOXPLOT_EXTENDED_FIGSIZE = (12, 6)\nBOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)\nBOXPLOT_FLIERSIZE = 6  # Larger outlier markers\n# Histogram\nHISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "BOXPLOT_LINEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "BOXPLOT_LINEWIDTH = 1.5  # Thicker box lines (Prism style)\nBOXPLOT_FLIERSIZE = 6  # Larger outlier markers\n# Histogram\nHISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "BOXPLOT_FLIERSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "BOXPLOT_FLIERSIZE = 6  # Larger outlier markers\n# Histogram\nHISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================\nVIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HISTOGRAM_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HISTOGRAM_FIGSIZE = (16, 10)  # More compact (was 20x12)\nHISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================\nVIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels\nVIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HISTOGRAM_X_ROTATION",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HISTOGRAM_X_ROTATION = 90\nHISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================\nVIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels\nVIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HISTOGRAM_X_HA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HISTOGRAM_X_HA = 'right'\nHISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================\nVIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels\nVIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HISTOGRAM_BAR_EDGEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HISTOGRAM_BAR_EDGEWIDTH = 1.0  # Thicker bar edges\n# ==============================================================================\n# VIP Score Plots (R/ggplot2) - MAXIMUM VISIBILITY\n# ==============================================================================\nVIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels\nVIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_FEATURE_NAME_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_FEATURE_NAME_SIZE = 5.0  # R ggplot2 units - Balanced size for full-length labels\nVIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_POINT_SIZE_MIN",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_POINT_SIZE_MIN = 8       # Minimum point size (scaled by VIP)\nVIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_POINT_SIZE_MAX",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_POINT_SIZE_MAX = 14      # Maximum point size (very prominent)\nVIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_POINT_STROKE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_POINT_STROKE = 3.5       # Very thick stroke for definition\nVIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_HEATMAP_WIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_HEATMAP_WIDTH = 0.30     # Extra wide tiles - easy to distinguish\nVIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_HEATMAP_HEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_HEATMAP_HEIGHT = 0.95    # Full height\nVIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_GROUP_LABEL_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_GROUP_LABEL_SIZE = 6.5   # Large bold group labels (Cancer/Normal)\nVIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_FIGURE_WIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_FIGURE_WIDTH = 20  # Reduced for API 2000px limit\nVIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_FIGURE_HEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_FIGURE_HEIGHT = 8        # Taller for better proportions\nVIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VIP_LEFT_MARGIN_EXPAND",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VIP_LEFT_MARGIN_EXPAND = 0.3  # Extra space on left for labels outside box\n# ==============================================================================\n# PCA Plot - PUBLICATION QUALITY\n# ==============================================================================\nPCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_FIGSIZE = (10, 8)\nPCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_LABEL_FONTSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_LABEL_FONTSIZE = 10      # Larger (was 9)\nPCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_LABEL_BBOX_PAD",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_LABEL_BBOX_PAD = 0.4     # More padding\nPCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_POINT_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_POINT_SIZE = 150         # Larger scatter points\nPCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_POINT_LINEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_POINT_LINEWIDTH = 2.0    # Thicker edges\nPCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "PCA_POINT_ALPHA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "PCA_POINT_ALPHA = 0.8\n# ==============================================================================\n# Volcano Plot - MAXIMUM VISIBILITY\n# ==============================================================================\nVOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_FIGSIZE = (14, 11)   # Extra large canvas for labels\nVOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_POINT_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_POINT_SIZE = 120     # Extra large base size\nVOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_POINT_ALPHA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_POINT_ALPHA = 0.8    # High visibility\nVOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_THRESHOLD_LINEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_THRESHOLD_LINEWIDTH = 3.0  # Thicker threshold lines\nVOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_THRESHOLD_ALPHA",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_THRESHOLD_ALPHA = 0.6\nVOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_POINT_EDGEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_POINT_EDGEWIDTH = 1.2  # Strong edges\nVOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_LABEL_FONTSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_LABEL_FONTSIZE = 14    # Extra large labels\nVOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_LABEL_WEIGHT",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_LABEL_WEIGHT = 'bold'  # Bold for emphasis\nVOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_LABEL_PADDING",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_LABEL_PADDING = 0.6    # More padding in label boxes\nVOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================\ndef apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_LABEL_LINEWIDTH",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_LABEL_LINEWIDTH = 2.5  # Thick label borders\nVOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================\ndef apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):\n    \"\"\"",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "VOLCANO_MAX_LABELS",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "VOLCANO_MAX_LABELS = 3         # Maximum labels to show (avoid overcrowding)\n# Heatmap\nHEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================\ndef apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):\n    \"\"\"\n    Apply Prism-inspired standardized styling to matplotlib axes",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HEATMAP_FIGSIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HEATMAP_FIGSIZE = (12, 9)  # More compact\nHEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================\ndef apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):\n    \"\"\"\n    Apply Prism-inspired standardized styling to matplotlib axes\n    Args:\n        ax: Matplotlib axes object",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "HEATMAP_CBAR_LABEL_SIZE",
        "kind": 5,
        "importPath": "src.plots.plot_config",
        "description": "src.plots.plot_config",
        "peekOfCode": "HEATMAP_CBAR_LABEL_SIZE = 11\n# ==============================================================================\n# Utility Functions\n# ==============================================================================\ndef apply_standard_axis_style(ax, xlabel=None, ylabel=None, title=None, grid=True):\n    \"\"\"\n    Apply Prism-inspired standardized styling to matplotlib axes\n    Args:\n        ax: Matplotlib axes object\n        xlabel: X-axis label text",
        "detail": "src.plots.plot_config",
        "documentation": {}
    },
    {
        "label": "RadarChartPlotMixin",
        "kind": 6,
        "importPath": "src.plots.radar_chart_plot",
        "description": "src.plots.radar_chart_plot",
        "peekOfCode": "class RadarChartPlotMixin:\n    \"\"\"Mixin class for radar/spider chart visualization\"\"\"\n    def plot_radar_chart(self, df: pd.DataFrame, figsize: tuple = (12, 10)):\n        \"\"\"\n        Create radar chart comparing glycan profiles between Cancer and Normal\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"\n        # Get sample columns",
        "detail": "src.plots.radar_chart_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.radar_chart_plot",
        "description": "src.plots.radar_chart_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass RadarChartPlotMixin:\n    \"\"\"Mixin class for radar/spider chart visualization\"\"\"\n    def plot_radar_chart(self, df: pd.DataFrame, figsize: tuple = (12, 10)):\n        \"\"\"\n        Create radar chart comparing glycan profiles between Cancer and Normal\n        Args:\n            df: Annotated DataFrame with intensity data\n            figsize: Figure size (width, height)\n        \"\"\"",
        "detail": "src.plots.radar_chart_plot",
        "documentation": {}
    },
    {
        "label": "SiteSpecificHeatmapMixin",
        "kind": 6,
        "importPath": "src.plots.site_specific_heatmap",
        "description": "src.plots.site_specific_heatmap",
        "peekOfCode": "class SiteSpecificHeatmapMixin:\n    \"\"\"Mixin class for site-specific glycosylation heatmap\"\"\"\n    def plot_site_specific_heatmap(self, df: pd.DataFrame, vip_df: pd.DataFrame,\n                                   top_n_peptides: int = 20,\n                                   figsize: tuple = (16, 12)):\n        \"\"\"\n        Create heatmap showing glycan compositions for top peptides\n        Args:\n            df: Annotated DataFrame with intensity data\n            vip_df: DataFrame with VIP scores",
        "detail": "src.plots.site_specific_heatmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.site_specific_heatmap",
        "description": "src.plots.site_specific_heatmap",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SiteSpecificHeatmapMixin:\n    \"\"\"Mixin class for site-specific glycosylation heatmap\"\"\"\n    def plot_site_specific_heatmap(self, df: pd.DataFrame, vip_df: pd.DataFrame,\n                                   top_n_peptides: int = 20,\n                                   figsize: tuple = (16, 12)):\n        \"\"\"\n        Create heatmap showing glycan compositions for top peptides\n        Args:\n            df: Annotated DataFrame with intensity data",
        "detail": "src.plots.site_specific_heatmap",
        "documentation": {}
    },
    {
        "label": "VennDiagramPlotMixin",
        "kind": 6,
        "importPath": "src.plots.venn_diagram_plot",
        "description": "src.plots.venn_diagram_plot",
        "peekOfCode": "class VennDiagramPlotMixin:\n    \"\"\"Mixin class for Venn diagram visualization\"\"\"\n    def plot_glycan_venn_diagram(self, df: pd.DataFrame, figsize: tuple = (12, 10)):\n        \"\"\"\n        Create Venn diagram showing overlap between glycan modification types\n        Args:\n            df: Annotated DataFrame with glycan annotations\n            figsize: Figure size (width, height)\n        \"\"\"\n        # Check if internal columns exist",
        "detail": "src.plots.venn_diagram_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.venn_diagram_plot",
        "description": "src.plots.venn_diagram_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass VennDiagramPlotMixin:\n    \"\"\"Mixin class for Venn diagram visualization\"\"\"\n    def plot_glycan_venn_diagram(self, df: pd.DataFrame, figsize: tuple = (12, 10)):\n        \"\"\"\n        Create Venn diagram showing overlap between glycan modification types\n        Args:\n            df: Annotated DataFrame with glycan annotations\n            figsize: Figure size (width, height)\n        \"\"\"",
        "detail": "src.plots.venn_diagram_plot",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotMixin",
        "kind": 6,
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "peekOfCode": "class VIPScorePlotMixin:\n    \"\"\"Mixin class for VIP score-related plots\"\"\"\n    def plot_vip_scores_glycopeptide(self, df: pd.DataFrame, vip_df: pd.DataFrame, figsize: tuple = (10, 6), top_n: int = 10):\n        \"\"\"\n        Plot top VIP scores by glycopeptide with heatmap showing Cancer/Normal intensity\n        Args:\n            df: Annotated DataFrame\n            vip_df: DataFrame with VIP scores by glycopeptide\n            figsize: Figure size\n            top_n: Number of top glycopeptides to show",
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.vip_score_plot",
        "description": "src.plots.vip_score_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass VIPScorePlotMixin:\n    \"\"\"Mixin class for VIP score-related plots\"\"\"\n    def plot_vip_scores_glycopeptide(self, df: pd.DataFrame, vip_df: pd.DataFrame, figsize: tuple = (10, 6), top_n: int = 10):\n        \"\"\"\n        Plot top VIP scores by glycopeptide with heatmap showing Cancer/Normal intensity\n        Args:\n            df: Annotated DataFrame\n            vip_df: DataFrame with VIP scores by glycopeptide\n            figsize: Figure size",
        "detail": "src.plots.vip_score_plot",
        "documentation": {}
    },
    {
        "label": "VIPScorePlotRMixin",
        "kind": 6,
        "importPath": "src.plots.vip_score_plot_r",
        "description": "src.plots.vip_score_plot_r",
        "peekOfCode": "class VIPScorePlotRMixin:\n    \"\"\"Mixin class for R-based VIP score plots using ggplot2\"\"\"\n    def _create_vip_plot_r(self, vip_data: pd.DataFrame, heatmap_data: pd.DataFrame,\n                           title: str, ylabel: str, output_file: str):\n        \"\"\"\n        Create VIP score plot with ggplot2\n        Args:\n            vip_data: DataFrame with columns [Feature, VIP_Score]\n            heatmap_data: DataFrame with columns [Feature, Cancer, Normal]\n            title: Plot title",
        "detail": "src.plots.vip_score_plot_r",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.vip_score_plot_r",
        "description": "src.plots.vip_score_plot_r",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass VIPScorePlotRMixin:\n    \"\"\"Mixin class for R-based VIP score plots using ggplot2\"\"\"\n    def _create_vip_plot_r(self, vip_data: pd.DataFrame, heatmap_data: pd.DataFrame,\n                           title: str, ylabel: str, output_file: str):\n        \"\"\"\n        Create VIP score plot with ggplot2\n        Args:\n            vip_data: DataFrame with columns [Feature, VIP_Score]\n            heatmap_data: DataFrame with columns [Feature, Cancer, Normal]",
        "detail": "src.plots.vip_score_plot_r",
        "documentation": {}
    },
    {
        "label": "VolcanoPlotMixin",
        "kind": 6,
        "importPath": "src.plots.volcano_plot",
        "description": "src.plots.volcano_plot",
        "peekOfCode": "class VolcanoPlotMixin:\n    \"\"\"Mixin class for Volcano plot visualization\"\"\"\n    def plot_volcano(self, df: pd.DataFrame, vip_df: pd.DataFrame,\n                     config: DataPreparationConfig = None,\n                     fdr_threshold: float = 0.05, fc_threshold: float = 1.5,\n                     figsize: tuple = (12, 10)):\n        \"\"\"\n        Create volcano plot showing log2(fold change) vs -log10(FDR)\n        UPDATED: Uses centralized data preparation for consistency\n        Args:",
        "detail": "src.plots.volcano_plot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.plots.volcano_plot",
        "description": "src.plots.volcano_plot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass VolcanoPlotMixin:\n    \"\"\"Mixin class for Volcano plot visualization\"\"\"\n    def plot_volcano(self, df: pd.DataFrame, vip_df: pd.DataFrame,\n                     config: DataPreparationConfig = None,\n                     fdr_threshold: float = 0.05, fc_threshold: float = 1.5,\n                     figsize: tuple = (12, 10)):\n        \"\"\"\n        Create volcano plot showing log2(fold change) vs -log10(FDR)\n        UPDATED: Uses centralized data preparation for consistency",
        "detail": "src.plots.volcano_plot",
        "documentation": {}
    },
    {
        "label": "GlycanAnalyzer",
        "kind": 6,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "class GlycanAnalyzer:\n    \"\"\"Perform statistical analysis on glycoproteomics data\"\"\"\n    def __init__(self,\n                 n_components: int = DEFAULT_PCA_COMPONENTS,\n                 log_transform: bool = DEFAULT_LOG_TRANSFORM):\n        \"\"\"\n        Initialize GlycanAnalyzer\n        Args:\n            n_components: Number of PCA components (default: 2)\n            log_transform: Whether to log-transform intensity values (default: True)",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "logger = get_logger(__name__)\nclass GlycanAnalyzer:\n    \"\"\"Perform statistical analysis on glycoproteomics data\"\"\"\n    def __init__(self,\n                 n_components: int = DEFAULT_PCA_COMPONENTS,\n                 log_transform: bool = DEFAULT_LOG_TRANSFORM):\n        \"\"\"\n        Initialize GlycanAnalyzer\n        Args:\n            n_components: Number of PCA components (default: 2)",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "GlycanAnnotator",
        "kind": 6,
        "importPath": "src.annotator",
        "description": "src.annotator",
        "peekOfCode": "class GlycanAnnotator:\n    \"\"\"Annotate glycopeptides based on glycan composition\"\"\"\n    def __init__(self,\n                 sialylation_marker: str = DEFAULT_SIALYLATION_MARKER,\n                 fucosylation_marker: str = DEFAULT_FUCOSYLATION_MARKER):\n        \"\"\"\n        Initialize GlycanAnnotator\n        Args:\n            sialylation_marker: Marker for sialylation (default: 'A' for NeuAc)\n            fucosylation_marker: Marker for fucosylation (default: 'F')",
        "detail": "src.annotator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.annotator",
        "description": "src.annotator",
        "peekOfCode": "logger = get_logger(__name__)\nclass GlycanAnnotator:\n    \"\"\"Annotate glycopeptides based on glycan composition\"\"\"\n    def __init__(self,\n                 sialylation_marker: str = DEFAULT_SIALYLATION_MARKER,\n                 fucosylation_marker: str = DEFAULT_FUCOSYLATION_MARKER):\n        \"\"\"\n        Initialize GlycanAnnotator\n        Args:\n            sialylation_marker: Marker for sialylation (default: 'A' for NeuAc)",
        "detail": "src.annotator",
        "documentation": {}
    },
    {
        "label": "ConfigValidator",
        "kind": 6,
        "importPath": "src.config_validator",
        "description": "src.config_validator",
        "peekOfCode": "class ConfigValidator:\n    \"\"\"Validates configuration dictionary\"\"\"\n    # Required top-level keys\n    REQUIRED_KEYS = ['paths', 'processing', 'annotation', 'analysis', 'visualization']\n    # Required nested keys\n    REQUIRED_NESTED_KEYS = {\n        'paths': ['dataset_dir', 'results_dir', 'output_file'],\n        'processing': ['required_columns', 'qc_filters'],\n        'annotation': ['sialylation_marker', 'fucosylation_marker'],\n        'analysis': ['pca', 'statistical_tests'],",
        "detail": "src.config_validator",
        "documentation": {}
    },
    {
        "label": "load_and_validate_config",
        "kind": 2,
        "importPath": "src.config_validator",
        "description": "src.config_validator",
        "peekOfCode": "def load_and_validate_config(config_path: str) -> Dict[str, Any]:\n    \"\"\"\n    Load configuration from YAML file and validate it\n    Args:\n        config_path: Path to config.yaml file\n    Returns:\n        Validated configuration dictionary\n    Raises:\n        ConfigurationError: If config file is invalid or missing\n    \"\"\"",
        "detail": "src.config_validator",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "src.data_loader",
        "description": "src.data_loader",
        "peekOfCode": "class DataLoader:\n    \"\"\"Load and integrate glycoproteomics data from multiple CSV files\"\"\"\n    def __init__(self, dataset_dir: str, required_columns: List[str]):\n        \"\"\"\n        Initialize DataLoader\n        Args:\n            dataset_dir: Path to directory containing CSV files\n            required_columns: List of required column names\n        \"\"\"\n        self.dataset_dir = Path(dataset_dir)",
        "detail": "src.data_loader",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.data_loader",
        "description": "src.data_loader",
        "peekOfCode": "logger = get_logger(__name__)\nclass DataLoader:\n    \"\"\"Load and integrate glycoproteomics data from multiple CSV files\"\"\"\n    def __init__(self, dataset_dir: str, required_columns: List[str]):\n        \"\"\"\n        Initialize DataLoader\n        Args:\n            dataset_dir: Path to directory containing CSV files\n            required_columns: List of required column names\n        \"\"\"",
        "detail": "src.data_loader",
        "documentation": {}
    },
    {
        "label": "DataPreparationConfig",
        "kind": 6,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "class DataPreparationConfig:\n    \"\"\"Configuration for standardized data preparation\"\"\"\n    def __init__(self, min_detection_pct: float = 0.30,\n                 min_samples: int = 5,\n                 missing_data_method: str = 'skipna'):\n        \"\"\"\n        Initialize data preparation configuration\n        Args:\n            min_detection_pct: Minimum detection % in at least one group (default: 0.30 = 30%)\n            min_samples: Minimum number of detected samples for statistical tests (default: 5)",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "calculate_detection_statistics",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def calculate_detection_statistics(df: pd.DataFrame,\n                                   sample_cols: List[str],\n                                   group_name: str = \"Group\") -> Dict[str, pd.Series]:\n    \"\"\"\n    Calculate detection statistics for a group of samples\n    STANDARDIZED METHOD: Used by all visualizations to ensure consistency\n    Args:\n        df: DataFrame with sample columns\n        sample_cols: List of sample column names\n        group_name: Name of the group (for logging)",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "calculate_group_statistics_standardized",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def calculate_group_statistics_standardized(df: pd.DataFrame,\n                                            sample_cols: List[str],\n                                            method: str = 'skipna',\n                                            group_name: str = \"Group\") -> Dict[str, pd.Series]:\n    \"\"\"\n    Calculate standardized statistics for a group of samples\n    CRITICAL: This is the SINGLE SOURCE OF TRUTH for mean calculations\n    All visualizations MUST use this function to ensure consistency\n    Args:\n        df: DataFrame with sample columns",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "filter_by_detection_frequency",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def filter_by_detection_frequency(df: pd.DataFrame,\n                                  config: DataPreparationConfig,\n                                  cancer_samples: List[str] = None,\n                                  normal_samples: List[str] = None,\n                                  log_prefix: str = \"\") -> pd.DataFrame:\n    \"\"\"\n    Apply standardized detection frequency filter\n    CRITICAL: This is the SINGLE SOURCE OF TRUTH for detection filtering\n    All visualizations MUST use this function to ensure consistency\n    Args:",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "prepare_visualization_data",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def prepare_visualization_data(df: pd.DataFrame,\n                               config: DataPreparationConfig,\n                               vip_scores: Optional[pd.DataFrame] = None,\n                               merge_method: str = 'left',\n                               apply_detection_filter: bool = True,\n                               log_prefix: str = \"\") -> pd.DataFrame:\n    \"\"\"\n    Centralized data preparation for visualizations\n    CRITICAL: This is the SINGLE SOURCE OF TRUTH for visualization data preparation\n    Pipeline:",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "get_standard_config_from_dict",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def get_standard_config_from_dict(config_dict: dict) -> DataPreparationConfig:\n    \"\"\"\n    Create DataPreparationConfig from configuration dictionary\n    Args:\n        config_dict: Configuration dictionary (from config.yaml)\n    Returns:\n        DataPreparationConfig instance\n    \"\"\"\n    # Extract parameters with defaults\n    detection_filter = config_dict.get('analysis', {}).get('detection_filter', {})",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "calculate_statistical_significance",
        "kind": 2,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "def calculate_statistical_significance(df_prep: pd.DataFrame,\n                                       cancer_samples: List[str],\n                                       normal_samples: List[str],\n                                       method: str = 'mannwhitneyu',\n                                       fdr_correction: bool = True) -> pd.DataFrame:\n    \"\"\"\n    Calculate statistical significance for differential expression\n    Args:\n        df_prep: Prepared DataFrame from prepare_visualization_data()\n        cancer_samples: List of cancer sample columns",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.data_preparation",
        "description": "src.data_preparation",
        "peekOfCode": "logger = get_logger(__name__)\nclass DataPreparationConfig:\n    \"\"\"Configuration for standardized data preparation\"\"\"\n    def __init__(self, min_detection_pct: float = 0.30,\n                 min_samples: int = 5,\n                 missing_data_method: str = 'skipna'):\n        \"\"\"\n        Initialize data preparation configuration\n        Args:\n            min_detection_pct: Minimum detection % in at least one group (default: 0.30 = 30%)",
        "detail": "src.data_preparation",
        "documentation": {}
    },
    {
        "label": "DataConsistencyValidator",
        "kind": 6,
        "importPath": "src.data_validator",
        "description": "src.data_validator",
        "peekOfCode": "class DataConsistencyValidator:\n    \"\"\"Validator for checking data consistency across visualizations\"\"\"\n    def __init__(self, tolerance: float = 1e-6):\n        \"\"\"\n        Initialize validator\n        Args:\n            tolerance: Numerical tolerance for floating-point comparisons\n        \"\"\"\n        self.tolerance = tolerance\n        self.validation_results = []",
        "detail": "src.data_validator",
        "documentation": {}
    },
    {
        "label": "quick_consistency_check",
        "kind": 2,
        "importPath": "src.data_validator",
        "description": "src.data_validator",
        "peekOfCode": "def quick_consistency_check(df1: pd.DataFrame,\n                           df2: pd.DataFrame,\n                           name1: str = \"Dataset1\",\n                           name2: str = \"Dataset2\") -> bool:\n    \"\"\"\n    Quick consistency check between two datasets\n    Args:\n        df1: First DataFrame\n        df2: Second DataFrame\n        name1: Name of first dataset",
        "detail": "src.data_validator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.data_validator",
        "description": "src.data_validator",
        "peekOfCode": "logger = get_logger(__name__)\nclass DataConsistencyValidator:\n    \"\"\"Validator for checking data consistency across visualizations\"\"\"\n    def __init__(self, tolerance: float = 1e-6):\n        \"\"\"\n        Initialize validator\n        Args:\n            tolerance: Numerical tolerance for floating-point comparisons\n        \"\"\"\n        self.tolerance = tolerance",
        "detail": "src.data_validator",
        "documentation": {}
    },
    {
        "label": "PGlycoAutoError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class PGlycoAutoError(Exception):\n    \"\"\"Base exception for all pGlyco Auto Combine errors\"\"\"\n    pass\n# ==============================================================================\n# Configuration Errors\n# ==============================================================================\nclass ConfigurationError(PGlycoAutoError):\n    \"\"\"Raised when configuration is invalid or missing\"\"\"\n    pass\nclass MissingConfigKeyError(ConfigurationError):",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "ConfigurationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class ConfigurationError(PGlycoAutoError):\n    \"\"\"Raised when configuration is invalid or missing\"\"\"\n    pass\nclass MissingConfigKeyError(ConfigurationError):\n    \"\"\"Raised when a required configuration key is missing\"\"\"\n    def __init__(self, key: str):\n        self.key = key\n        super().__init__(f\"Missing required configuration key: {key}\")\nclass InvalidConfigValueError(ConfigurationError):\n    \"\"\"Raised when a configuration value is invalid\"\"\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingConfigKeyError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class MissingConfigKeyError(ConfigurationError):\n    \"\"\"Raised when a required configuration key is missing\"\"\"\n    def __init__(self, key: str):\n        self.key = key\n        super().__init__(f\"Missing required configuration key: {key}\")\nclass InvalidConfigValueError(ConfigurationError):\n    \"\"\"Raised when a configuration value is invalid\"\"\"\n    def __init__(self, key: str, value, reason: str = \"\"):\n        self.key = key\n        self.value = value",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidConfigValueError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class InvalidConfigValueError(ConfigurationError):\n    \"\"\"Raised when a configuration value is invalid\"\"\"\n    def __init__(self, key: str, value, reason: str = \"\"):\n        self.key = key\n        self.value = value\n        self.reason = reason\n        message = f\"Invalid configuration value for '{key}': {value}\"\n        if reason:\n            message += f\" - {reason}\"\n        super().__init__(message)",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "DataLoadError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class DataLoadError(PGlycoAutoError):\n    \"\"\"Raised when data loading fails\"\"\"\n    pass\nclass NoDataFilesError(DataLoadError):\n    \"\"\"Raised when no CSV files are found in the dataset directory\"\"\"\n    def __init__(self, directory: str):\n        self.directory = directory\n        super().__init__(f\"No CSV files found in directory: {directory}\")\nclass MissingColumnError(DataLoadError):\n    \"\"\"Raised when required columns are missing from input data\"\"\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NoDataFilesError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class NoDataFilesError(DataLoadError):\n    \"\"\"Raised when no CSV files are found in the dataset directory\"\"\"\n    def __init__(self, directory: str):\n        self.directory = directory\n        super().__init__(f\"No CSV files found in directory: {directory}\")\nclass MissingColumnError(DataLoadError):\n    \"\"\"Raised when required columns are missing from input data\"\"\"\n    def __init__(self, filename: str, missing_columns: list):\n        self.filename = filename\n        self.missing_columns = missing_columns",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingColumnError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class MissingColumnError(DataLoadError):\n    \"\"\"Raised when required columns are missing from input data\"\"\"\n    def __init__(self, filename: str, missing_columns: list):\n        self.filename = filename\n        self.missing_columns = missing_columns\n        super().__init__(\n            f\"Missing required columns in {filename}: {', '.join(missing_columns)}\"\n        )\nclass InvalidDataFormatError(DataLoadError):\n    \"\"\"Raised when data format is invalid\"\"\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidDataFormatError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class InvalidDataFormatError(DataLoadError):\n    \"\"\"Raised when data format is invalid\"\"\"\n    def __init__(self, filename: str, reason: str):\n        self.filename = filename\n        self.reason = reason\n        super().__init__(f\"Invalid data format in {filename}: {reason}\")\nclass EmptyDataError(DataLoadError):\n    \"\"\"Raised when no valid data is loaded\"\"\"\n    def __init__(self, context: str = \"\"):\n        message = \"No valid data loaded\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "EmptyDataError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class EmptyDataError(DataLoadError):\n    \"\"\"Raised when no valid data is loaded\"\"\"\n    def __init__(self, context: str = \"\"):\n        message = \"No valid data loaded\"\n        if context:\n            message += f\": {context}\"\n        super().__init__(message)\n# ==============================================================================\n# Annotation Errors\n# ==============================================================================",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "AnnotationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class AnnotationError(PGlycoAutoError):\n    \"\"\"Raised when annotation fails\"\"\"\n    pass\nclass InvalidGlycanCompositionError(AnnotationError):\n    \"\"\"Raised when glycan composition string is invalid\"\"\"\n    def __init__(self, composition: str, reason: str = \"\"):\n        self.composition = composition\n        self.reason = reason\n        message = f\"Invalid glycan composition: {composition}\"\n        if reason:",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidGlycanCompositionError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class InvalidGlycanCompositionError(AnnotationError):\n    \"\"\"Raised when glycan composition string is invalid\"\"\"\n    def __init__(self, composition: str, reason: str = \"\"):\n        self.composition = composition\n        self.reason = reason\n        message = f\"Invalid glycan composition: {composition}\"\n        if reason:\n            message += f\" - {reason}\"\n        super().__init__(message)\n# ==============================================================================",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "AnalysisError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class AnalysisError(PGlycoAutoError):\n    \"\"\"Raised when statistical analysis fails\"\"\"\n    pass\nclass InsufficientDataError(AnalysisError):\n    \"\"\"Raised when insufficient data for analysis\"\"\"\n    def __init__(self, analysis_type: str, required: int, actual: int):\n        self.analysis_type = analysis_type\n        self.required = required\n        self.actual = actual\n        super().__init__(",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientDataError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class InsufficientDataError(AnalysisError):\n    \"\"\"Raised when insufficient data for analysis\"\"\"\n    def __init__(self, analysis_type: str, required: int, actual: int):\n        self.analysis_type = analysis_type\n        self.required = required\n        self.actual = actual\n        super().__init__(\n            f\"Insufficient data for {analysis_type}: \"\n            f\"required {required}, got {actual}\"\n        )",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "MatrixShapeError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class MatrixShapeError(AnalysisError):\n    \"\"\"Raised when matrix dimensions are incompatible\"\"\"\n    def __init__(self, expected_shape: tuple, actual_shape: tuple, context: str = \"\"):\n        self.expected_shape = expected_shape\n        self.actual_shape = actual_shape\n        message = f\"Matrix shape mismatch: expected {expected_shape}, got {actual_shape}\"\n        if context:\n            message += f\" - {context}\"\n        super().__init__(message)\nclass NormalizationError(AnalysisError):",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NormalizationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class NormalizationError(AnalysisError):\n    \"\"\"Raised when normalization fails\"\"\"\n    def __init__(self, reason: str):\n        super().__init__(f\"Normalization failed: {reason}\")\n# ==============================================================================\n# Visualization Errors\n# ==============================================================================\nclass VisualizationError(PGlycoAutoError):\n    \"\"\"Raised when visualization generation fails\"\"\"\n    pass",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "VisualizationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class VisualizationError(PGlycoAutoError):\n    \"\"\"Raised when visualization generation fails\"\"\"\n    pass\nclass PlotGenerationError(VisualizationError):\n    \"\"\"Raised when a specific plot fails to generate\"\"\"\n    def __init__(self, plot_type: str, reason: str):\n        self.plot_type = plot_type\n        self.reason = reason\n        super().__init__(f\"Failed to generate {plot_type}: {reason}\")\nclass MissingVisualizationDataError(VisualizationError):",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "PlotGenerationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class PlotGenerationError(VisualizationError):\n    \"\"\"Raised when a specific plot fails to generate\"\"\"\n    def __init__(self, plot_type: str, reason: str):\n        self.plot_type = plot_type\n        self.reason = reason\n        super().__init__(f\"Failed to generate {plot_type}: {reason}\")\nclass MissingVisualizationDataError(VisualizationError):\n    \"\"\"Raised when required data for visualization is missing\"\"\"\n    def __init__(self, plot_type: str, missing_data: str):\n        self.plot_type = plot_type",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingVisualizationDataError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class MissingVisualizationDataError(VisualizationError):\n    \"\"\"Raised when required data for visualization is missing\"\"\"\n    def __init__(self, plot_type: str, missing_data: str):\n        self.plot_type = plot_type\n        self.missing_data = missing_data\n        super().__init__(\n            f\"Missing required data for {plot_type}: {missing_data}\"\n        )\n# ==============================================================================\n# File I/O Errors",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "FileOperationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class FileOperationError(PGlycoAutoError):\n    \"\"\"Raised when file operations fail\"\"\"\n    pass\nclass OutputDirectoryError(FileOperationError):\n    \"\"\"Raised when output directory cannot be created or accessed\"\"\"\n    def __init__(self, directory: str, reason: str):\n        self.directory = directory\n        self.reason = reason\n        super().__init__(\n            f\"Cannot access/create output directory {directory}: {reason}\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "OutputDirectoryError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class OutputDirectoryError(FileOperationError):\n    \"\"\"Raised when output directory cannot be created or accessed\"\"\"\n    def __init__(self, directory: str, reason: str):\n        self.directory = directory\n        self.reason = reason\n        super().__init__(\n            f\"Cannot access/create output directory {directory}: {reason}\"\n        )\nclass TraceDataSaveError(FileOperationError):\n    \"\"\"Raised when trace data cannot be saved\"\"\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "TraceDataSaveError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class TraceDataSaveError(FileOperationError):\n    \"\"\"Raised when trace data cannot be saved\"\"\"\n    def __init__(self, filename: str, reason: str):\n        self.filename = filename\n        self.reason = reason\n        super().__init__(f\"Failed to save trace data {filename}: {reason}\")\n# ==============================================================================\n# Validation Errors\n# ==============================================================================\nclass ValidationError(PGlycoAutoError):",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class ValidationError(PGlycoAutoError):\n    \"\"\"Raised when data validation fails\"\"\"\n    pass\nclass SampleCountMismatchError(ValidationError):\n    \"\"\"Raised when sample counts don't match expected values\"\"\"\n    def __init__(self, expected: int, actual: int, sample_type: str = \"\"):\n        self.expected = expected\n        self.actual = actual\n        self.sample_type = sample_type\n        message = f\"Sample count mismatch: expected {expected}, got {actual}\"",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "SampleCountMismatchError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class SampleCountMismatchError(ValidationError):\n    \"\"\"Raised when sample counts don't match expected values\"\"\"\n    def __init__(self, expected: int, actual: int, sample_type: str = \"\"):\n        self.expected = expected\n        self.actual = actual\n        self.sample_type = sample_type\n        message = f\"Sample count mismatch: expected {expected}, got {actual}\"\n        if sample_type:\n            message += f\" for {sample_type}\"\n        super().__init__(message)",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "ValueRangeError",
        "kind": 6,
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "peekOfCode": "class ValueRangeError(ValidationError):\n    \"\"\"Raised when values are outside expected range\"\"\"\n    def __init__(self, value, min_val, max_val, field_name: str = \"\"):\n        self.value = value\n        self.min_val = min_val\n        self.max_val = max_val\n        message = f\"Value {value} outside valid range [{min_val}, {max_val}]\"\n        if field_name:\n            message = f\"{field_name}: {message}\"\n        super().__init__(message)",
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "peekOfCode": "def setup_logging(level: str = LOG_LEVEL_INFO,\n                 log_file: Optional[Path] = None,\n                 console: bool = True) -> None:\n    \"\"\"\n    Configure logging for the entire application\n    Should be called once at the start of the application.\n    Subsequent calls will be ignored to prevent reconfiguration.\n    Args:\n        level: Logging level (INFO, DEBUG, WARNING, ERROR)\n        log_file: Optional path to log file for file output",
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "peekOfCode": "def get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Get a logger instance for a specific module\n    Args:\n        name: Name of the logger (typically __name__)\n    Returns:\n        Logger instance\n    \"\"\"\n    return logging.getLogger(name)\ndef reset_logging() -> None:",
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "reset_logging",
        "kind": 2,
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "peekOfCode": "def reset_logging() -> None:\n    \"\"\"\n    Reset logging configuration (mainly for testing)\n    \"\"\"\n    global _logging_configured\n    _logging_configured = False\n    root_logger = logging.getLogger()\n    root_logger.handlers = []",
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "_logging_configured",
        "kind": 5,
        "importPath": "src.logger_config",
        "description": "src.logger_config",
        "peekOfCode": "_logging_configured = False\ndef setup_logging(level: str = LOG_LEVEL_INFO,\n                 log_file: Optional[Path] = None,\n                 console: bool = True) -> None:\n    \"\"\"\n    Configure logging for the entire application\n    Should be called once at the start of the application.\n    Subsequent calls will be ignored to prevent reconfiguration.\n    Args:\n        level: Logging level (INFO, DEBUG, WARNING, ERROR)",
        "detail": "src.logger_config",
        "documentation": {}
    },
    {
        "label": "replace_empty_with_zero",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def replace_empty_with_zero(data: Union[pd.DataFrame, pd.Series]) -> Union[pd.DataFrame, pd.Series]:\n    \"\"\"\n    Replace empty strings with 0 without FutureWarning\n    Uses mask() instead of replace() to avoid pandas downcasting warnings.\n    Args:\n        data: pandas Series or DataFrame\n    Returns:\n        Data with empty strings replaced by 0\n    \"\"\"\n    if isinstance(data, pd.DataFrame):",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "to_numeric_safe",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def to_numeric_safe(data: Union[pd.DataFrame, pd.Series]) -> Union[pd.DataFrame, pd.Series]:\n    \"\"\"\n    Convert to numeric safely without downcasting warnings\n    Args:\n        data: pandas Series or DataFrame\n    Returns:\n        Numeric data\n    \"\"\"\n    if isinstance(data, pd.DataFrame):\n        return data.apply(pd.to_numeric, errors='coerce').fillna(0)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "convert_to_numeric_with_na",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def convert_to_numeric_with_na(data: Union[pd.DataFrame, pd.Series]) -> Union[pd.DataFrame, pd.Series]:\n    \"\"\"\n    Convert empty strings to NaN (NOT zero) for proper missing data handling\n    SCIENTIFIC VALIDITY: Missing values should be treated as NaN, not zero.\n    Zero implies \"measured and found to be absent\", while NaN means \"not measured\".\n    Args:\n        data: pandas Series or DataFrame with potential empty strings\n    Returns:\n        Data with empty strings converted to NaN (numeric dtype)\n    \"\"\"",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "calculate_group_statistics",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def calculate_group_statistics(df: pd.DataFrame, sample_cols: List[str]) -> Dict[str, pd.Series]:\n    \"\"\"\n    Calculate statistics using only non-missing values (skipna=True)\n    SCIENTIFIC VALIDITY: Using skipna=True ensures that missing values don't bias\n    the mean downward. Only measured values are used in calculations.\n    Args:\n        df: DataFrame with intensity data\n        sample_cols: List of sample column names\n    Returns:\n        Dictionary with statistics:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "ensure_directory",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def ensure_directory(directory: Union[str, Path]) -> Path:\n    \"\"\"\n    Ensure a directory exists, create if it doesn't\n    Args:\n        directory: Path to directory\n    Returns:\n        Path object to the directory\n    Raises:\n        OutputDirectoryError: If directory cannot be created\n    \"\"\"",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "ensure_trace_dir",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def ensure_trace_dir(output_dir: Union[str, Path]) -> Path:\n    \"\"\"\n    Ensure Trace directory exists for visualization data exports\n    Args:\n        output_dir: Base output directory\n    Returns:\n        Path to Trace directory\n    \"\"\"\n    trace_dir = Path(output_dir) / TRACE_DIR\n    return ensure_directory(trace_dir)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "save_trace_data",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def save_trace_data(data: pd.DataFrame, output_dir: Union[str, Path], filename: str) -> Path:\n    \"\"\"\n    Save visualization source data to Trace folder\n    Args:\n        data: DataFrame to save\n        output_dir: Base output directory\n        filename: Name of the trace file (e.g., 'heatmap_data.csv')\n    Returns:\n        Path to saved file\n    Raises:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_sample_columns",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_sample_columns(df: pd.DataFrame,\n                       exclude_metadata: bool = True) -> Tuple[List[str], List[str]]:\n    \"\"\"\n    Extract cancer and normal sample columns from DataFrame\n    Identifies columns that represent cancer samples (start with 'C' followed by digits)\n    and normal samples (start with 'N' followed by digits).\n    Args:\n        df: DataFrame with sample columns\n        exclude_metadata: If True, only return sample columns (no metadata)\n    Returns:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_all_sample_columns",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_all_sample_columns(df: pd.DataFrame) -> List[str]:\n    \"\"\"\n    Get all sample columns (both cancer and normal)\n    Args:\n        df: DataFrame with sample columns\n    Returns:\n        List of all sample column names sorted (C samples first, then N samples)\n    \"\"\"\n    cancer_samples, normal_samples = get_sample_columns(df)\n    return cancer_samples + normal_samples",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_metadata_columns",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_metadata_columns(df: pd.DataFrame) -> List[str]:\n    \"\"\"\n    Get metadata columns from DataFrame\n    Args:\n        df: DataFrame\n    Returns:\n        List of metadata column names that exist in the DataFrame\n    \"\"\"\n    return [col for col in df.columns if col in METADATA_COLUMNS]\n# ==============================================================================",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "extract_sample_id",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def extract_sample_id(filename: str) -> str:\n    \"\"\"\n    Extract sample ID from filename (e.g., C_01.csv -> C1)\n    Args:\n        filename: Name of the CSV file\n    Returns:\n        Sample ID (e.g., 'C1', 'N10')\n    \"\"\"\n    match = re.search(SAMPLE_ID_PATTERN, filename)\n    if match:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_sample_group",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_sample_group(sample_name: str) -> str:\n    \"\"\"\n    Determine if sample is Cancer or Normal based on name\n    Args:\n        sample_name: Sample column name (e.g., 'C1', 'N10')\n    Returns:\n        'Cancer' or 'Normal'\n    \"\"\"\n    if sample_name.startswith(CANCER_PREFIX):\n        return GROUP_CANCER",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "is_cancer_sample",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def is_cancer_sample(sample_name: str) -> bool:\n    \"\"\"Check if sample is a cancer sample\"\"\"\n    return sample_name.startswith(CANCER_PREFIX)\ndef is_normal_sample(sample_name: str) -> bool:\n    \"\"\"Check if sample is a normal sample\"\"\"\n    return sample_name.startswith(NORMAL_PREFIX)\n# ==============================================================================\n# Data Transformation\n# ==============================================================================\ndef log_transform(data: Union[pd.DataFrame, pd.Series, np.ndarray],",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "is_normal_sample",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def is_normal_sample(sample_name: str) -> bool:\n    \"\"\"Check if sample is a normal sample\"\"\"\n    return sample_name.startswith(NORMAL_PREFIX)\n# ==============================================================================\n# Data Transformation\n# ==============================================================================\ndef log_transform(data: Union[pd.DataFrame, pd.Series, np.ndarray],\n                 pseudocount: float = LOG_TRANSFORM_PSEUDOCOUNT) -> Union[pd.DataFrame, pd.Series, np.ndarray]:\n    \"\"\"\n    Apply log2 transformation with pseudocount",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "log_transform",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def log_transform(data: Union[pd.DataFrame, pd.Series, np.ndarray],\n                 pseudocount: float = LOG_TRANSFORM_PSEUDOCOUNT) -> Union[pd.DataFrame, pd.Series, np.ndarray]:\n    \"\"\"\n    Apply log2 transformation with pseudocount\n    Args:\n        data: Data to transform\n        pseudocount: Value to add before log transform (default: 1.0)\n    Returns:\n        Log2-transformed data\n    \"\"\"",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "validate_statistical_power",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def validate_statistical_power(cancer_samples: List[str], normal_samples: List[str],\n                               min_n: int = 5) -> None:\n    \"\"\"\n    Validate that sample sizes are sufficient for statistical analysis\n    SCIENTIFIC VALIDITY: Statistical tests require minimum sample sizes for adequate power.\n    - n < 3: Invalid (cannot compute variance)\n    - n < 5: Under-powered (high Type II error rate)\n    - n >= 5: Acceptable for exploratory analysis\n    - n >= 10: Good power for hypothesis testing\n    Args:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "calculate_fold_change",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def calculate_fold_change(cancer_mean: float, normal_mean: float,\n                         log_scale: bool = False, pseudocount: float = 1.0) -> float:\n    \"\"\"\n    Calculate fold change between cancer and normal with pseudocount\n    SCIENTIFIC VALIDITY: Uses pseudocount to handle zeros and make log2 fold change symmetric.\n    - Simple division: 2-fold up = 2.0, 2-fold down = 0.5 (asymmetric)\n    - Log2 fold change: 2-fold up = +1.0, 2-fold down = -1.0 (symmetric)\n    Args:\n        cancer_mean: Mean intensity in cancer samples\n        normal_mean: Mean intensity in normal samples",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "calculate_statistics",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def calculate_statistics(values: Union[pd.Series, np.ndarray]) -> dict:\n    \"\"\"\n    Calculate basic statistics for a set of values\n    Args:\n        values: Array of values\n    Returns:\n        Dictionary with mean, median, std, min, max\n    \"\"\"\n    if isinstance(values, pd.Series):\n        values = values.values",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "validate_sample_counts",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def validate_sample_counts(df: pd.DataFrame,\n                          min_cancer: int = 1,\n                          min_normal: int = 1) -> Tuple[int, int]:\n    \"\"\"\n    Validate sample counts in DataFrame\n    Args:\n        df: DataFrame with sample columns\n        min_cancer: Minimum number of cancer samples required\n        min_normal: Minimum number of normal samples required\n    Returns:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "validate_dataframe_not_empty",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def validate_dataframe_not_empty(df: pd.DataFrame, context: str = \"\") -> None:\n    \"\"\"\n    Validate that DataFrame is not empty\n    Args:\n        df: DataFrame to validate\n        context: Context message for error\n    Raises:\n        ValidationError: If DataFrame is empty\n    \"\"\"\n    if df is None or len(df) == 0:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "format_percentage",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def format_percentage(value: float, decimals: int = 1) -> str:\n    \"\"\"Format value as percentage string\"\"\"\n    return f\"{value * 100:.{decimals}f}%\"\ndef format_scientific(value: float, decimals: int = 2) -> str:\n    \"\"\"Format value in scientific notation\"\"\"\n    return f\"{value:.{decimals}e}\"\ndef format_pvalue(pvalue: float) -> str:\n    \"\"\"\n    Format p-value with appropriate precision\n    Args:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "format_scientific",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def format_scientific(value: float, decimals: int = 2) -> str:\n    \"\"\"Format value in scientific notation\"\"\"\n    return f\"{value:.{decimals}e}\"\ndef format_pvalue(pvalue: float) -> str:\n    \"\"\"\n    Format p-value with appropriate precision\n    Args:\n        pvalue: P-value to format\n    Returns:\n        Formatted string (e.g., \"0.001\" or \"< 0.001\")",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "format_pvalue",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def format_pvalue(pvalue: float) -> str:\n    \"\"\"\n    Format p-value with appropriate precision\n    Args:\n        pvalue: P-value to format\n    Returns:\n        Formatted string (e.g., \"0.001\" or \"< 0.001\")\n    \"\"\"\n    if pvalue < 0.001:\n        return \"< 0.001\"",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_cached_metadata_columns",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_cached_metadata_columns() -> Tuple[str, ...]:\n    \"\"\"\n    Get metadata columns (cached for performance)\n    Returns:\n        Tuple of metadata column names\n    \"\"\"\n    return tuple(METADATA_COLUMNS)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ==============================================================================\n# Data Type Conversion\n# ==============================================================================\ndef replace_empty_with_zero(data: Union[pd.DataFrame, pd.Series]) -> Union[pd.DataFrame, pd.Series]:\n    \"\"\"\n    Replace empty strings with 0 without FutureWarning\n    Uses mask() instead of replace() to avoid pandas downcasting warnings.\n    Args:\n        data: pandas Series or DataFrame",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "GlycanVisualizer",
        "kind": 6,
        "importPath": "src.visualizer",
        "description": "src.visualizer",
        "peekOfCode": "class GlycanVisualizer(\n    PCAPlotMixin,\n    BoxplotMixin,\n    HeatmapMixin,\n    HistogramMixin,\n    VIPScorePlotMixin,\n    VIPScorePlotRMixin,\n    DistributionPlotMixin,\n    VolcanoPlotMixin,\n    SiteSpecificHeatmapMixin,",
        "detail": "src.visualizer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.visualizer",
        "description": "src.visualizer",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GlycanVisualizer(\n    PCAPlotMixin,\n    BoxplotMixin,\n    HeatmapMixin,\n    HistogramMixin,\n    VIPScorePlotMixin,\n    VIPScorePlotRMixin,\n    DistributionPlotMixin,\n    VolcanoPlotMixin,",
        "detail": "src.visualizer",
        "documentation": {}
    },
    {
        "label": "TestDataPreparationConfig",
        "kind": 6,
        "importPath": "tests.test_data_consistency",
        "description": "tests.test_data_consistency",
        "peekOfCode": "class TestDataPreparationConfig:\n    \"\"\"Test DataPreparationConfig initialization and validation\"\"\"\n    def test_default_config(self):\n        \"\"\"Test default configuration\"\"\"\n        config = DataPreparationConfig()\n        assert config.min_detection_pct == 0.30\n        assert config.min_samples == 5\n        assert config.missing_data_method == 'skipna'\n    def test_custom_config(self):\n        \"\"\"Test custom configuration\"\"\"",
        "detail": "tests.test_data_consistency",
        "documentation": {}
    },
    {
        "label": "TestGroupStatistics",
        "kind": 6,
        "importPath": "tests.test_data_consistency",
        "description": "tests.test_data_consistency",
        "peekOfCode": "class TestGroupStatistics:\n    \"\"\"Test group statistics calculation\"\"\"\n    @pytest.fixture\n    def sample_data(self):\n        \"\"\"Create sample data for testing\"\"\"\n        data = {\n            'Peptide': ['PEP1', 'PEP2', 'PEP3'],\n            'GlycanComposition': ['H(5)N(4)', 'H(6)N(5)A(1)', 'H(5)N(4)F(1)'],\n            'C1': [100, 200, ''],  # Empty string (missing)\n            'C2': [150, '', 300],",
        "detail": "tests.test_data_consistency",
        "documentation": {}
    },
    {
        "label": "TestDetectionFiltering",
        "kind": 6,
        "importPath": "tests.test_data_consistency",
        "description": "tests.test_data_consistency",
        "peekOfCode": "class TestDetectionFiltering:\n    \"\"\"Test detection frequency filtering\"\"\"\n    @pytest.fixture\n    def test_data(self):\n        \"\"\"Create test data with varying detection rates\"\"\"\n        data = {\n            'Peptide': ['PEP_HIGH', 'PEP_MED', 'PEP_LOW'],\n            'GlycanComposition': ['H(5)N(4)', 'H(6)N(5)', 'H(7)N(6)'],\n            # PEP_HIGH: 80% detection in cancer\n            'C1': [100, 50, ''],",
        "detail": "tests.test_data_consistency",
        "documentation": {}
    },
    {
        "label": "TestConsistencyValidation",
        "kind": 6,
        "importPath": "tests.test_data_consistency",
        "description": "tests.test_data_consistency",
        "peekOfCode": "class TestConsistencyValidation:\n    \"\"\"Test data consistency validation\"\"\"\n    @pytest.fixture\n    def consistent_datasets(self):\n        \"\"\"Create two consistent datasets\"\"\"\n        data1 = {\n            'Peptide': ['PEP1', 'PEP2'],\n            'GlycanComposition': ['H(5)N(4)', 'H(6)N(5)'],\n            'Cancer_Mean': [150.0, 200.0],\n            'Normal_Mean': [100.0, 180.0],",
        "detail": "tests.test_data_consistency",
        "documentation": {}
    },
    {
        "label": "TestPieChartData",
        "kind": 6,
        "importPath": "tests.test_data_consistency",
        "description": "tests.test_data_consistency",
        "peekOfCode": "class TestPieChartData:\n    \"\"\"Test pie chart data preparation\"\"\"\n    @pytest.fixture\n    def pie_chart_data(self):\n        \"\"\"Create sample data for pie chart testing\"\"\"\n        data = {\n            'Peptide': ['PEP1', 'PEP2', 'PEP3', 'PEP4'],\n            'GlycanComposition': ['H(5)N(4)', 'H(6)N(5)A(1)', 'H(5)N(4)F(1)', 'H(6)N(5)A(1)F(1)'],\n            'GlycanType': ['Non', 'Sialylated', 'Fucosylated', 'Both'],\n            'PrimaryClassification': ['High Mannose', 'ComplexHybrid', 'ComplexHybrid', 'ComplexHybrid'],",
        "detail": "tests.test_data_consistency",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    \"\"\"Main pipeline execution\"\"\"\n    logger.info(\"=\"*80)\n    logger.info(\"pGlyco Auto Combine - Glycoproteomics Data Analysis Pipeline\")\n    logger.info(\"=\"*80)\n    # Load and validate configuration\n    logger.info(\"\\n[1/6] Loading and validating configuration...\")\n    try:\n        config = load_and_validate_config('config.yaml')\n        logger.info(\"Configuration validated successfully\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = get_logger(__name__)\ndef main():\n    \"\"\"Main pipeline execution\"\"\"\n    logger.info(\"=\"*80)\n    logger.info(\"pGlyco Auto Combine - Glycoproteomics Data Analysis Pipeline\")\n    logger.info(\"=\"*80)\n    # Load and validate configuration\n    logger.info(\"\\n[1/6] Loading and validating configuration...\")\n    try:\n        config = load_and_validate_config('config.yaml')",
        "detail": "main",
        "documentation": {}
    }
]